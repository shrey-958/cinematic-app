{"version":3,"sources":["NavBar.js","FetchMovie.js","Popular.js","InTheatre.js","Drama.js","Kids.js","SearchEngine.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","navStyle","color","textDecoration","className","src","alt","style","to","FetchMovie","props","imgUrl","title","vote_average","overview","Popular","state","poster_path","collection","fetch","then","response","json","data","setState","results","movieArr","this","map","item","i","React","Component","InTheatre","Drama","original_name","Kids","SearchEngine","searchTerm","handleChange","bind","handleSubmit","event","target","value","console","log","word","placeholder","type","onChange","onClick","App","NavBar","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d6aa241.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport './Design.css'\r\nfunction Navbar(){\r\n    const navStyle ={\r\n        color : \"#000000\",\r\n        textDecoration : \"none\"\r\n    }\r\n    \r\n    return(\r\n        <nav>\r\n        <img className=\"ticket\" src=\"http://www.pngall.com/wp-content/uploads/2018/06/Cinema-PNG-HD.png\" alt=\"ticket\"></img>\r\n            <ul className=\"navLinks\">\r\n                <Link style={navStyle} to=\"/drama\"><li>TV</li> </Link>\r\n                <Link style={navStyle} to=\"/intheatre\"> <li>Now Up</li> </Link>\r\n                <Link style={navStyle} to=\"/\" > <li>Popular</li> </Link>\r\n                <Link style={navStyle} to=\"/kids\"> <li>Kids</li> </Link>\r\n                <Link style={navStyle} to=\"search\"><li>Search</li> </Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\nimport './Design.css'\r\n\r\nfunction FetchMovie(props) {\r\n  //var srcc = \"https://image.tmdb.org/t/p/w34\" + {props.imgUrl}\r\n  return (\r\n    <table>\r\n    <tr>\r\n      <td>\r\n      <div className=\"ImgContainer\">\r\n      <img src ={`https://image.tmdb.org/t/p/original${props.imgUrl}`} alt=\"lol\"></img>\r\n      </div>\r\n      </td>\r\n      <td className=\"Information\">\r\n      <div className=\"TextContainer\">\r\n      <div className=\"Title\">{props.title}</div>\r\n  <div className=\"Rating\" >{props.vote_average}</div>\r\n    <hr />\r\n  <div className=\"Description\">{props.overview}</div>\r\n    </div>\r\n    \r\n      </td>\r\n    </tr>\r\n    \r\n  </table>\r\n)\r\n}\r\n  \r\n  export default FetchMovie;\r\n  ","import React from 'react';\r\nimport FetchMovie from \"./FetchMovie\"\r\n\r\nclass Popular extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      \r\n      title : \"\",\r\n      poster_path : \"\",\r\n      vote_average : 0,\r\n      overview : \"\",\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342/rzRwTcFvttcN1ZpX2xv4j3tSdJu.jpg\",\r\n      collection : []\r\n    }\r\n    //this.handleChange=this.handleChange.bind(this)\r\n    \r\n  }\r\n  componentDidMount()\r\n  {\r\n    fetch(\"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=3873ba12aec3a0826303ee52803a6094\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.setState({\r\n        collection : data.results\r\n      })\r\n    })\r\n   \r\n    \r\n   \r\n    \r\n  }\r\n  /* handleChange(event){\r\n    event.preventDefault()\r\n    const randNum = Math.floor(Math.random()* this.state.collection.length)\r\n    this.setState({\r\n      title : this.state.collection[randNum].title,\r\n      vote_average : this.state.collection[randNum].vote_average,\r\n      overview : this.state.collection[randNum].overview,\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342\" + this.state.collection[randNum].poster_path\r\n    })\r\n  } */\r\n  render(){\r\n    const movieArr = this.state.collection.map((item,i) => <FetchMovie \r\n     title = {this.state.collection[i].title}\r\n     vote_average = {this.state.collection[i].vote_average}\r\n     overview = {this.state.collection[i].overview}\r\n     imgUrl = {this.state.collection[i].poster_path}\r\n\r\n     />)\r\n  return (\r\n    <div>\r\n      {/*<button onClick={this.handleChange}>Click Me</button>*/}\r\n      \r\n      {movieArr}\r\n      \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default Popular;\r\n","import React from 'react';\r\nimport FetchMovie from \"./FetchMovie\"\r\n\r\nclass InTheatre extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      \r\n      title : \"\",\r\n      poster_path : \"\",\r\n      vote_average : 0,\r\n      overview : \"\",\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342/rzRwTcFvttcN1ZpX2xv4j3tSdJu.jpg\",\r\n      collection : []\r\n    }\r\n    //this.handleChange=this.handleChange.bind(this)\r\n    \r\n  }\r\n  componentDidMount()\r\n  {\r\n    fetch(\"https://api.themoviedb.org/3/discover/movie?primary_release_date.gte=2014-09-15&primary_release_date.lte=2014-10-22&api_key=3873ba12aec3a0826303ee52803a6094\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.setState({\r\n        collection : data.results\r\n      })\r\n    })\r\n   \r\n    \r\n   \r\n    \r\n  }\r\n  /* handleChange(event){\r\n    event.preventDefault()\r\n    const randNum = Math.floor(Math.random()* this.state.collection.length)\r\n    this.setState({\r\n      title : this.state.collection[randNum].title,\r\n      vote_average : this.state.collection[randNum].vote_average,\r\n      overview : this.state.collection[randNum].overview,\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342\" + this.state.collection[randNum].poster_path\r\n    })\r\n  } */\r\n  render(){\r\n    const movieArr = this.state.collection.map((item,i) => <FetchMovie \r\n     title = {this.state.collection[i].title}\r\n     vote_average = {this.state.collection[i].vote_average}\r\n     overview = {this.state.collection[i].overview}\r\n     imgUrl = {this.state.collection[i].poster_path}\r\n\r\n     />)\r\n  return (\r\n    <div>\r\n      {/*<button onClick={this.handleChange}>Click Me</button>*/}\r\n      \r\n      {movieArr}\r\n      \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default InTheatre;\r\n","import React from 'react';\r\nimport FetchMovie from \"./FetchMovie\"\r\n\r\nclass Drama extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      \r\n      title : \"\",\r\n      poster_path : \"\",\r\n      vote_average : 0,\r\n      overview : \"\",\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342/rzRwTcFvttcN1ZpX2xv4j3tSdJu.jpg\",\r\n      collection : []\r\n    }\r\n    //this.handleChange=this.handleChange.bind(this)\r\n    \r\n  }\r\n  componentDidMount()\r\n  {\r\n    fetch(\"https://api.themoviedb.org/3/tv/top_rated?api_key=3873ba12aec3a0826303ee52803a6094&language=en-US&page=1\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.setState({\r\n        collection : data.results\r\n      })\r\n    })\r\n   \r\n    \r\n   \r\n    \r\n  }\r\n  /* handleChange(event){\r\n    event.preventDefault()\r\n    const randNum = Math.floor(Math.random()* this.state.collection.length)\r\n    this.setState({\r\n      title : this.state.collection[randNum].title,\r\n      vote_average : this.state.collection[randNum].vote_average,\r\n      overview : this.state.collection[randNum].overview,\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342\" + this.state.collection[randNum].poster_path\r\n    })\r\n  } */\r\n  render(){\r\n    const movieArr = this.state.collection.map((item,i) => <FetchMovie \r\n     title = {this.state.collection[i].original_name}\r\n     vote_average = {this.state.collection[i].vote_average}\r\n     overview = {this.state.collection[i].overview}\r\n     imgUrl = {this.state.collection[i].poster_path}\r\n\r\n     />)\r\n  return (\r\n    <div>\r\n      {/*<button onClick={this.handleChange}>Click Me</button>*/}\r\n      \r\n      {movieArr}\r\n      \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default Drama;\r\n","import React from 'react';\r\nimport FetchMovie from \"./FetchMovie\"\r\n\r\nclass Kids extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      \r\n      title : \"\",\r\n      poster_path : \"\",\r\n      vote_average : 0,\r\n      overview : \"\",\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342/rzRwTcFvttcN1ZpX2xv4j3tSdJu.jpg\",\r\n      collection : []\r\n    }\r\n    //this.handleChange=this.handleChange.bind(this)\r\n    \r\n  }\r\n  componentDidMount()\r\n  {\r\n    fetch(\"https://api.themoviedb.org/3/discover/movie?certification_country=US&certification.lte=G&sort_by=popularity.desc&api_key=3873ba12aec3a0826303ee52803a6094\")\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.setState({\r\n        collection : data.results\r\n      })\r\n    })\r\n   \r\n    \r\n   \r\n    \r\n  }\r\n  /* handleChange(event){\r\n    event.preventDefault()\r\n    const randNum = Math.floor(Math.random()* this.state.collection.length)\r\n    this.setState({\r\n      title : this.state.collection[randNum].title,\r\n      vote_average : this.state.collection[randNum].vote_average,\r\n      overview : this.state.collection[randNum].overview,\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342\" + this.state.collection[randNum].poster_path\r\n    })\r\n  } */\r\n  render(){\r\n    const movieArr = this.state.collection.map((item,i) => <FetchMovie \r\n     title = {this.state.collection[i].title}\r\n     vote_average = {this.state.collection[i].vote_average}\r\n     overview = {this.state.collection[i].overview}\r\n     imgUrl = {this.state.collection[i].poster_path}\r\n\r\n     />)\r\n  return (\r\n    <div>\r\n      {/*<button onClick={this.handleChange}>Click Me</button>*/}\r\n      \r\n      {movieArr}\r\n      \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default Kids;\r\n","import React from 'react';\r\nimport FetchMovie from \"./FetchMovie\"\r\nimport './Design.css'\r\n\r\nclass SearchEngine extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n        searchTerm : \"\",\r\n      title : \"\",\r\n      poster_path : \"\",\r\n      vote_average : 0,\r\n      overview : \"\",\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342/rzRwTcFvttcN1ZpX2xv4j3tSdJu.jpg\",\r\n      collection : []\r\n    }\r\n    //this.handleChange=this.handleChange.bind(this)\r\n    this.handleChange=this.handleChange.bind(this)\r\n    this.handleSubmit=this.handleSubmit.bind(this)\r\n  }\r\n  \r\n   \r\n    \r\n   \r\n    \r\n  \r\n  handleChange(event){\r\n    this.setState({\r\n        searchTerm : event.target.value\r\n        })\r\n\r\n    console.log(this.state.searchTerm)\r\n}\r\nhandleSubmit(event){\r\n    console.log(this.state.searchTerm)\r\n    fetch(`https://api.themoviedb.org/3/search/movie?query=${this.state.searchTerm}&api_key=3873ba12aec3a0826303ee52803a6094`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.setState({\r\n        collection : data.results\r\n      })\r\n    })\r\n    return(\r\n        <SearchEngine word={this.state.searchTerm} />\r\n    )\r\n}\r\n  /* handleChange(event){\r\n    event.preventDefault()\r\n    const randNum = Math.floor(Math.random()* this.state.collection.length)\r\n    this.setState({\r\n      title : this.state.collection[randNum].title,\r\n      vote_average : this.state.collection[randNum].vote_average,\r\n      overview : this.state.collection[randNum].overview,\r\n      imgUrl : \"https://image.tmdb.org/t/p/w342\" + this.state.collection[randNum].poster_path\r\n    })\r\n  } */\r\n  render(){\r\n    const movieArr = this.state.collection.map((item,i) => <FetchMovie \r\n     title = {this.state.collection[i].title}\r\n     vote_average = {this.state.collection[i].vote_average}\r\n     overview = {this.state.collection[i].overview}\r\n     imgUrl = {this.state.collection[i].poster_path}\r\n\r\n     />)\r\n  return (\r\n    <div>\r\n      {/*<button onClick={this.handleChange}>Click Me</button>*/}\r\n      <input className=\"searchOpt\" placeholder=\"Search For Movies...\" type=\"text\" onChange={this.handleChange} />\r\n        <button onClick={this.handleSubmit}><b>Go</b></button>\r\n      \r\n      {movieArr}\r\n      \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default SearchEngine;\r\n","import React from 'react';\r\nimport FetchMovie from \"./FetchMovie\"\r\nimport SearchEngine from \"./SearchEngine\"\r\nimport './Design.css'\r\n\r\nclass Search extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n\r\n      searchTerm : \"\"\r\n    }\r\n    this.handleChange=this.handleChange.bind(this)\r\n    this.handleSubmit=this.handleSubmit.bind(this)\r\n}\r\nhandleChange(event){\r\n    this.setState({\r\n        searchTerm : event.target.value\r\n        \r\n        \r\n    })\r\n    console.log(this.state.searchTerm)\r\n        \r\n    \r\n}\r\nhandleSubmit(event){\r\n    console.log(this.state.searchTerm)\r\n    return(\r\n        <SearchEngine word={this.state.searchTerm} />\r\n    )\r\n}\r\n\r\nrender(){\r\n    return(\r\n        <div>\r\n        <input placeholder=\"Search For Movies...\" type=\"text\" onChange={this.handleChange} />\r\n        <button onClick={this.handleSubmit}>Go</button>\r\n        \r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default Search\r\n","import React from 'react';\nimport './App.css';  \nimport NavBar from \"./NavBar\"\nimport Popular from \"./Popular\"\nimport InTheatre from \"./InTheatre\"\nimport Drama from \"./Drama\"\nimport Kids from \"./Kids\"\nimport Search from \"./Search\"\nimport SearchEngine from \"./SearchEngine\"\nimport FetchMovie from \"./FetchMovie\"\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\n\n \n\nclass App extends React.Component {\n  render(){\n    return(\n     <Router>\n     <NavBar />\n     <Switch>\n     <Route path=\"/\" exact component={Popular} />\n     <Route path=\"/intheatre\" exact component={InTheatre} />\n     <Route path=\"/drama\" exact component={Drama} />\n     <Route path=\"/kids\" exact component={Kids} />\n     <Route path=\"/search\" exact component={SearchEngine} />\n\n     </Switch>\n     \n     </Router>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}